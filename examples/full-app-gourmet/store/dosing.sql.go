// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dosing.sql

package store

import (
	"context"

	"github.com/go-fuego/fuego/examples/full-app-gourmet/store/types"
)

const createDosing = `-- name: CreateDosing :one
INSERT INTO dosing (recipe_id, ingredient_id, quantity, unit) VALUES (?, ?, ?, ?) RETURNING recipe_id, ingredient_id, quantity, unit
`

type CreateDosingParams struct {
	RecipeID     string     `json:"recipe_id"`
	IngredientID string     `json:"ingredient_id"`
	Quantity     int64      `json:"quantity" validate:"required,gt=0"`
	Unit         types.Unit `json:"unit" validate:"required"`
}

func (q *Queries) CreateDosing(ctx context.Context, arg CreateDosingParams) (Dosing, error) {
	row := q.db.QueryRowContext(ctx, createDosing,
		arg.RecipeID,
		arg.IngredientID,
		arg.Quantity,
		arg.Unit,
	)
	var i Dosing
	err := row.Scan(
		&i.RecipeID,
		&i.IngredientID,
		&i.Quantity,
		&i.Unit,
	)
	return i, err
}

const getDosings = `-- name: GetDosings :many
SELECT recipe_id, ingredient_id, quantity, unit FROM dosing
`

func (q *Queries) GetDosings(ctx context.Context) ([]Dosing, error) {
	rows, err := q.db.QueryContext(ctx, getDosings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dosing
	for rows.Next() {
		var i Dosing
		if err := rows.Scan(
			&i.RecipeID,
			&i.IngredientID,
			&i.Quantity,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
