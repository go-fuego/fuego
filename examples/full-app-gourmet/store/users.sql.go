// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, full_name, email, encrypted_password) VALUES (?, ?, ?, ?) RETURNING username, created_at, full_name, email, encrypted_password
`

type CreateUserParams struct {
	Username          string `json:"username"`
	FullName          string `json:"full_name"`
	Email             string `json:"email"`
	EncryptedPassword string `json:"encrypted_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.EncryptedPassword,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.CreatedAt,
		&i.FullName,
		&i.Email,
		&i.EncryptedPassword,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, created_at, full_name, email, encrypted_password FROM users WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.CreatedAt,
		&i.FullName,
		&i.Email,
		&i.EncryptedPassword,
	)
	return i, err
}
