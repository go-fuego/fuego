// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_recipe_favorites.sql

package store

import (
	"context"
)

const addFavorite = `-- name: AddFavorite :one
INSERT INTO users_recipes_favorites (username, recipe_id) VALUES (?, ?) RETURNING username, recipe_id, created_at
`

type AddFavoriteParams struct {
	Username string `json:"username"`
	RecipeID string `json:"recipe_id"`
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) (UsersRecipesFavorite, error) {
	row := q.db.QueryRowContext(ctx, addFavorite, arg.Username, arg.RecipeID)
	var i UsersRecipesFavorite
	err := row.Scan(&i.Username, &i.RecipeID, &i.CreatedAt)
	return i, err
}

const getFavoritesByUser = `-- name: GetFavoritesByUser :many
SELECT recipe.id, recipe.created_at, recipe.name, recipe.description, recipe.instructions, recipe.category, recipe.published, recipe.created_by, recipe.calories, recipe.cost, recipe.prep_time, recipe.cook_time, recipe.servings, recipe.image_url, recipe.disclaimer, recipe.when_to_eat FROM users_recipes_favorites
JOIN recipe ON users_recipes_favorites.recipe_id = recipe.id
WHERE username = ?
`

type GetFavoritesByUserRow struct {
	Recipe Recipe `json:"recipe"`
}

func (q *Queries) GetFavoritesByUser(ctx context.Context, username string) ([]GetFavoritesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFavoritesByUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritesByUserRow
	for rows.Next() {
		var i GetFavoritesByUserRow
		if err := rows.Scan(
			&i.Recipe.ID,
			&i.Recipe.CreatedAt,
			&i.Recipe.Name,
			&i.Recipe.Description,
			&i.Recipe.Instructions,
			&i.Recipe.Category,
			&i.Recipe.Published,
			&i.Recipe.CreatedBy,
			&i.Recipe.Calories,
			&i.Recipe.Cost,
			&i.Recipe.PrepTime,
			&i.Recipe.CookTime,
			&i.Recipe.Servings,
			&i.Recipe.ImageUrl,
			&i.Recipe.Disclaimer,
			&i.Recipe.WhenToEat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavorite = `-- name: RemoveFavorite :exec
DELETE FROM users_recipes_favorites WHERE username = ? AND recipe_id = ?
`

type RemoveFavoriteParams struct {
	Username string `json:"username"`
	RecipeID string `json:"recipe_id"`
}

func (q *Queries) RemoveFavorite(ctx context.Context, arg RemoveFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavorite, arg.Username, arg.RecipeID)
	return err
}
