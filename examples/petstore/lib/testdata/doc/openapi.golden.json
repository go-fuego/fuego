{
	"components": {
		"schemas": {
			"BareSuccessResponse_models.Pets": {
				"description": "BareSuccessResponse_models.Pets schema",
				"properties": {
					"message": {
						"type": "string"
					},
					"result": {
						"properties": {
							"age": {
								"description": "Age of the pet, in years",
								"example": 2,
								"type": "integer"
							},
							"birth_date": {
								"format": "date-time",
								"type": "string"
							},
							"id": {
								"example": "pet-123456",
								"type": "string"
							},
							"is_adopted": {
								"description": "Is the pet adopted",
								"type": "boolean"
							},
							"name": {
								"example": "Napoleon",
								"type": "string"
							},
							"references": {
								"properties": {
									"type": {
										"description": "type of reference",
										"example": "pet-123456",
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								},
								"type": "object"
							},
							"treats": {
								"items": {
									"nullable": true,
									"properties": {
										"brand": {
											"description": "The brand of the treat",
											"nullable": true,
											"type": "string"
										},
										"itemId": {
											"description": "The unique id of the treat",
											"format": "uuid",
											"type": "string"
										},
										"name": {
											"description": "the name of a treat",
											"type": "string"
										}
									},
									"required": [
										"itemId",
										"name"
									],
									"type": "object"
								},
								"nullable": true,
								"type": "array"
							}
						},
						"required": [
							"id",
							"name"
						],
						"type": "object"
					},
					"statusCode": {
						"type": "integer"
					}
				},
				"type": "object"
			},
			"GenericInput_models.Pets": {
				"description": "GenericInput_models.Pets schema",
				"properties": {
					"data": {
						"properties": {
							"age": {
								"description": "Age of the pet, in years",
								"example": 2,
								"type": "integer"
							},
							"birth_date": {
								"format": "date-time",
								"type": "string"
							},
							"id": {
								"example": "pet-123456",
								"type": "string"
							},
							"is_adopted": {
								"description": "Is the pet adopted",
								"type": "boolean"
							},
							"name": {
								"example": "Napoleon",
								"type": "string"
							},
							"references": {
								"properties": {
									"type": {
										"description": "type of reference",
										"example": "pet-123456",
										"type": "string"
									},
									"value": {
										"type": "string"
									}
								},
								"type": "object"
							},
							"treats": {
								"items": {
									"nullable": true,
									"properties": {
										"brand": {
											"description": "The brand of the treat",
											"nullable": true,
											"type": "string"
										},
										"itemId": {
											"description": "The unique id of the treat",
											"format": "uuid",
											"type": "string"
										},
										"name": {
											"description": "the name of a treat",
											"type": "string"
										}
									},
									"required": [
										"itemId",
										"name"
									],
									"type": "object"
								},
								"nullable": true,
								"type": "array"
							}
						},
						"required": [
							"id",
							"name"
						],
						"type": "object"
					},
					"thing": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"HTTPError": {
				"description": "HTTPError schema",
				"properties": {
					"detail": {
						"description": "Human readable error message",
						"nullable": true,
						"type": "string"
					},
					"errors": {
						"items": {
							"nullable": true,
							"properties": {
								"more": {
									"additionalProperties": {
										"description": "Additional information about the error",
										"nullable": true
									},
									"description": "Additional information about the error",
									"nullable": true,
									"type": "object"
								},
								"name": {
									"description": "For example, name of the parameter that caused the error",
									"type": "string"
								},
								"reason": {
									"description": "Human readable error message",
									"type": "string"
								}
							},
							"type": "object"
						},
						"nullable": true,
						"type": "array"
					},
					"instance": {
						"nullable": true,
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"example": 403,
						"nullable": true,
						"type": "integer"
					},
					"title": {
						"description": "Short title of the error",
						"nullable": true,
						"type": "string"
					},
					"type": {
						"description": "URL of the error type. Can be used to lookup the error in a documentation",
						"nullable": true,
						"type": "string"
					}
				},
				"type": "object"
			},
			"NoContent": {
				"description": "NoContent schema"
			},
			"Pets": {
				"description": "Pets schema",
				"properties": {
					"age": {
						"description": "Age of the pet, in years",
						"example": 2,
						"type": "integer"
					},
					"birth_date": {
						"format": "date-time",
						"type": "string"
					},
					"id": {
						"example": "pet-123456",
						"type": "string"
					},
					"is_adopted": {
						"description": "Is the pet adopted",
						"type": "boolean"
					},
					"name": {
						"example": "Napoleon",
						"type": "string"
					},
					"references": {
						"properties": {
							"type": {
								"description": "type of reference",
								"example": "pet-123456",
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"treats": {
						"items": {
							"nullable": true,
							"properties": {
								"brand": {
									"description": "The brand of the treat",
									"nullable": true,
									"type": "string"
								},
								"itemId": {
									"description": "The unique id of the treat",
									"format": "uuid",
									"type": "string"
								},
								"name": {
									"description": "the name of a treat",
									"type": "string"
								}
							},
							"required": [
								"itemId",
								"name"
							],
							"type": "object"
						},
						"nullable": true,
						"type": "array"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"PetsCreate": {
				"description": "PetsCreate schema",
				"properties": {
					"age": {
						"description": "Age of the pet, in years",
						"example": 2,
						"maximum": 100,
						"minimum": 0,
						"type": "integer"
					},
					"is_adopted": {
						"description": "Is the pet adopted",
						"type": "boolean"
					},
					"name": {
						"example": "Napoleon",
						"maxLength": 100,
						"minLength": 1,
						"type": "string"
					},
					"references": {
						"properties": {
							"type": {
								"description": "type of reference",
								"example": "pet-123456",
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"name"
				],
				"type": "object"
			},
			"PetsError": {
				"description": "PetsError schema",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"PetsUpdate": {
				"description": "PetsUpdate schema",
				"properties": {
					"age": {
						"example": 2,
						"maximum": 100,
						"nullable": true,
						"type": "integer"
					},
					"is_adopted": {
						"description": "Is the pet adopted",
						"nullable": true,
						"type": "boolean"
					},
					"name": {
						"description": "Name of the pet",
						"example": "Napoleon",
						"maxLength": 100,
						"minLength": 1,
						"nullable": true,
						"type": "string"
					},
					"references": {
						"properties": {
							"type": {
								"description": "type of reference",
								"example": "pet-123456",
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"treats": {
						"items": {
							"nullable": true,
							"properties": {
								"brand": {
									"description": "The brand of the treat",
									"nullable": true,
									"type": "string"
								},
								"itemId": {
									"description": "The unique id of the treat",
									"format": "uuid",
									"type": "string"
								},
								"name": {
									"description": "the name of a treat",
									"type": "string"
								}
							},
							"required": [
								"itemId",
								"name"
							],
							"type": "object"
						},
						"nullable": true,
						"type": "array"
					}
				},
				"type": "object"
			},
			"unknown-interface": {
				"description": "unknown-interface schema"
			}
		}
	},
	"info": {
		"title": "Pet Store",
		"version": "0.0.2"
	},
	"openapi": "3.1.0",
	"paths": {
		"/pets/": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.filterPets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\nFilter pets",
				"operationId": "GET_/pets/",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Number of items per page",
						"in": "query",
						"name": "per_page",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"description": "Page number",
						"examples": {
							"100th page": {
								"value": 100
							},
							"1st page": {
								"value": 1
							},
							"42nd page": {
								"value": 42
							}
						},
						"in": "query",
						"name": "page",
						"schema": {
							"default": 1,
							"type": "integer"
						}
					},
					{
						"description": "Filter by name",
						"examples": {
							"cat name": {
								"value": "felix"
							}
						},
						"in": "query",
						"name": "name",
						"schema": {
							"nullable": true,
							"type": "string"
						}
					},
					{
						"description": "Only get pets younger than given age in years",
						"in": "query",
						"name": "younger_than",
						"schema": {
							"default": 3,
							"type": "integer"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Content-Range": {
								"examples": {
									"42 pets": {
										"value": "0-10/42"
									}
								},
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"206": {
						"description": "OK",
						"headers": {
							"Content-Range": {
								"examples": {
									"42 pets": {
										"value": "0-10/42"
									}
								},
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "filter pets",
				"tags": [
					"pets"
				]
			},
			"post": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.postPets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "POST_/pets/",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/PetsCreate"
							}
						}
					},
					"description": "Request body for models.PetsCreate",
					"required": true
				},
				"responses": {
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							}
						},
						"description": "Created"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"409": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PetsError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/PetsError"
								}
							}
						},
						"description": "Conflict: Pet with the same name already exists"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "post pets",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/all": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.getAllPets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\nGet all pets",
				"operationId": "GET_/pets/all",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Number of items per page",
						"in": "query",
						"name": "per_page",
						"required": true,
						"schema": {
							"type": "integer"
						}
					},
					{
						"description": "Page number",
						"examples": {
							"100th page": {
								"value": 100
							},
							"1st page": {
								"value": 1
							},
							"42nd page": {
								"value": 42
							}
						},
						"in": "query",
						"name": "page",
						"schema": {
							"default": 1,
							"type": "integer"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							}
						},
						"description": "OK",
						"headers": {
							"Content-Range": {
								"examples": {
									"42 pets": {
										"value": "0-10/42"
									}
								},
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"206": {
						"description": "OK",
						"headers": {
							"Content-Range": {
								"examples": {
									"42 pets": {
										"value": "0-10/42"
									}
								},
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get all pets",
				"tags": [
					"pets",
					"my-tag"
				]
			}
		},
		"/pets/by-age": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.getAllPetsByAge`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n- `github.com/go-fuego/fuego/examples/petstore/controllers.dummyMiddleware`\n\n---\n\nReturns an array of pets grouped by age",
				"operationId": "GET_/pets/by-age",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"items": {
											"$ref": "#/components/schemas/Pets"
										},
										"type": "array"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"items": {
											"$ref": "#/components/schemas/Pets"
										},
										"type": "array"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get all pets by age",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/by-name/{name}": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.getPetByName`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/pets/by-name/:name",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get pet by name",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/generic-response": {
			"post": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.genericRequestAndResponse`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\nGeneric request and response. Showcase Fuego's support for generic input \u0026 output.",
				"operationId": "POST_/pets/generic-response",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/GenericInput_models.Pets"
							}
						}
					},
					"description": "Request body for controller.GenericInput[github.com/go-fuego/fuego/examples/petstore/models.Pets]",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BareSuccessResponse_models.Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/BareSuccessResponse_models.Pets"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "generic request and response",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/json/{id}": {
			"put": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.putPets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "PUT_/pets/json/:id",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PetsUpdate"
							}
						}
					},
					"description": "Request body for models.PetsUpdate",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "Update a pet with JSON-only body",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/std/all": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.Routes.func1`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "GET_/pets/std/all",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							}
						},
						"description": "all the pets"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "func1",
				"tags": [
					"pets",
					"std"
				]
			}
		},
		"/pets/strongly-typed": {
			"get": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.filterPetsStronglyTyped`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\nFilter pets",
				"operationId": "GET_/pets/strongly-typed",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by name",
						"examples": {
							"example": {
								"value": "Filter by name"
							}
						},
						"in": "query",
						"name": "name",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "younger_than",
						"schema": {
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "just_an_array",
						"schema": {
							"items": {
								"type": "integer"
							},
							"type": "array"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							},
							"application/xml": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Pets"
									},
									"type": "array"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "filter pets strongly typed",
				"tags": [
					"pets"
				]
			}
		},
		"/pets/{id}": {
			"delete": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.deletePets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "DELETE_/pets/:id",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/unknown-interface"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/unknown-interface"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "delete pets",
				"tags": [
					"pets"
				]
			},
			"get": {
				"description": "Replace description with this sentence.",
				"operationId": "getPet",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Pet ID",
						"examples": {
							"example": {
								"value": "123"
							}
						},
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get pets",
				"tags": [
					"pets"
				]
			},
			"put": {
				"description": "#### Controller: \n\n`github.com/go-fuego/fuego/examples/petstore/controllers.PetsResources.putPets`\n\n#### Middlewares:\n\n- `github.com/go-fuego/fuego.defaultLogger.middleware`\n\n---\n\n",
				"operationId": "PUT_/pets/:id",
				"parameters": [
					{
						"description": "header description",
						"in": "header",
						"name": "X-Header",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/PetsUpdate"
							}
						}
					},
					"description": "Request body for models.PetsUpdate",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pets"
								}
							}
						},
						"description": "OK"
					},
					"204": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/NoContent"
								}
							}
						},
						"description": "No Content"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "put pets",
				"tags": [
					"pets"
				]
			}
		}
	},
	"tags": [
		{
			"name": "my-tag"
		},
		{
			"name": "pets"
		},
		{
			"name": "std"
		}
	]
}